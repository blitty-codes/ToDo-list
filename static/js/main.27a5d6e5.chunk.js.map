{"version":3,"sources":["components/tasks/TaskCard.jsx","config/config.js","components/tasks/Add.jsx","components/tasks/Tasks.jsx","components/Error.jsx","components/Container.jsx","components/tasks/Options.jsx","components/Footer.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["TaskCard","task","id","transferTODO","state","className","value","onClick","todosDone","localStorage","getItem","global","JSON","parse","push","length","msg","setItem","stringify","todosNotDone","nameStorage","Add","onUpdate","taskRef","useRef","ref","type","placeholder","todo","current","trim","todos","Provider","Tasks","update","tasksP","useState","tasks","setTasks","less","setLess","useLayoutEffect","storage","Array","isArray","nameStor","map","elem","console","log","idElem","pop","key","Error","href","Container","children","setUpdate","setState","increment","changeState","a","React","Children","child","props","name","stateTask","cloneElement","Options","ShadowOutDone","setShadowOutDone","ShadowOutNotDone","setShadowOutNotDone","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.27a5d6e5.chunk.js","sourcesContent":["/* eslint-disable no-undef */\r\nimport React from 'react'\r\nimport { AiFillLike, AiFillDislike, AiFillDelete } from 'react-icons/ai'\r\n\r\nimport '../../assets/card.css'\r\nimport '../../config/config'\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst TaskCard = ({ task, id, transferTODO, state }) => {\r\n  // state is a property that has 3 states:\r\n  //  -1 is the abstract state, where the task is not done but maybe it is been doing\r\n  //  0 the task is not done\r\n  //  1 the task is done\r\n  // we want to have these states to know when we want to display the tasks done\r\n  // that the only have the delete button, the tasks that has not been done, they\r\n  // have the button done and delete and the abstract state to show the tasks that\r\n  // the person tries to achive\r\n\r\n  const taskDone = () => {\r\n    if (id !== -1 && id !== -2) {\r\n      let todosDone = localStorage.getItem(global.todosDone)\r\n\r\n      transferTODO(id)\r\n      if (todosDone !== null) {\r\n        todosDone = JSON.parse(todosDone)\r\n        todosDone.push({\r\n          id: todosDone.length,\r\n          msg: task\r\n        })\r\n      } else {\r\n        todosDone = [\r\n          {\r\n            id: 0,\r\n            msg: task\r\n          }\r\n        ]\r\n      }\r\n\r\n      localStorage.setItem(global.todosDone, JSON.stringify(todosDone))\r\n    }\r\n  }\r\n  const taskNotDone = () => {\r\n    if (id !== -1 && id !== -2) {\r\n      let todosNotDone = localStorage.getItem(global.todosNotDone)\r\n\r\n      transferTODO(id)\r\n      if (todosNotDone !== null) {\r\n        todosNotDone = JSON.parse(todosNotDone)\r\n        todosNotDone.push({\r\n          id: todosNotDone.length,\r\n          msg: task\r\n        })\r\n      } else {\r\n        todosNotDone = [\r\n          {\r\n            id: 0,\r\n            msg: task\r\n          }\r\n        ]\r\n      }\r\n\r\n      localStorage.setItem(global.todosNotDone, JSON.stringify(todosNotDone))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"card-container\" value={id}>\r\n      <div className=\"task-place\">\r\n        <p>{task}</p>\r\n      </div>\r\n      <div className=\"buttons\">\r\n        <span onClick={taskDone}>\r\n          <AiFillLike\r\n            className={`${state === 1 ? 'doneTask' : 'done'}`}\r\n          />\r\n        </span>\r\n        <span onClick={taskNotDone}>\r\n          <AiFillDislike\r\n            className={`${state === 0 ? 'notDoneTask' : 'notDone'}`}\r\n          />\r\n        </span>\r\n        <span onClick={transferTODO}>\r\n          <AiFillDelete\r\n            className=\"delete\"\r\n          />\r\n        </span>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default TaskCard\r\n","// localstorage name\r\nglobal.nameStorage = 'todo-list'\r\nglobal.todosDone = 'todo-list-done'\r\nglobal.todosNotDone = 'todo-list-notDone'\r\n","/* eslint-disable no-undef */\nimport React, { useRef } from 'react'\nimport { IconContext } from 'react-icons'\nimport { AiOutlinePlusCircle } from 'react-icons/ai'\n\nimport '../../assets/add.css'\nimport '../../config/config'\n\n// eslint-disable-next-line react/prop-types\nconst Add = ({ onUpdate }) => {\n  const taskRef = useRef()\n\n  const isEmpty = str => !str.trim().length\n\n  const addTODO = () => {\n    const todo = taskRef.current.value\n    if (!isEmpty(todo)) {\n      let todos = JSON.parse(localStorage.getItem(global.nameStorage))\n\n      if (todos !== null) {\n        todos.push({\n          id: todos.length,\n          msg: todo\n        })\n      } else {\n        todos = [\n          {\n            id: 0,\n            msg: todo\n          }\n        ]\n      }\n\n      // console.log(todos)\n\n      localStorage.setItem(global.nameStorage, JSON.stringify(todos))\n\n      onUpdate()\n      // blanck after adding a task\n      taskRef.current.value = ''\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <input\n        ref={taskRef}\n        className=\"addTask\"\n        type=\"search\"\n        placeholder=\"Add a task\"\n      />\n      <button className=\"addToList\" onClick={addTODO}>\n        <IconContext.Provider value={{ className: 'addIcon' }}>\n          <AiOutlinePlusCircle />\n        </IconContext.Provider>\n      </button>\n    </div>\n  )\n}\n\nexport default Add\n","/* eslint-disable no-undef */\r\nimport React, { useLayoutEffect, useState } from 'react'\r\n\r\nimport TaskCard from './TaskCard'\r\n\r\nimport '../../assets/card.css'\r\nimport '../../config/config'\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst Tasks = ({ update, state }) => {\r\n  const tasksP = [\r\n    {\r\n      id: -1,\r\n      msg: 'You can add any task'\r\n    },\r\n    {\r\n      id: -2,\r\n      msg: 'This tasks will disapear'\r\n    }\r\n  ]\r\n  const [tasks, setTasks] = useState()\r\n  const [less, setLess] = useState(0)\r\n\r\n  useLayoutEffect(() => {\r\n    let storage\r\n    if (state === 0) { storage = JSON.parse(localStorage.getItem(global.todosNotDone)) }\r\n    if (state === 1) { storage = JSON.parse(localStorage.getItem(global.todosDone)) }\r\n    if (state === -1) { storage = JSON.parse(localStorage.getItem(global.nameStorage)) }\r\n\r\n    if (Array.isArray(storage) && storage.length !== 0) { setTasks(storage) } else setTasks(tasksP)\r\n  }, [update, less, state])\r\n\r\n  // eliminates the TODO from any localstorage\r\n  const transferTODO = (id) => {\r\n    let nameStor\r\n    if (state === -1) { nameStor = global.nameStorage }\r\n    else if (state === 0) { nameStor = global.todosNotDone }\r\n    else if (state === 1) { nameStor = global.todosDone }\r\n    const todos = JSON.parse(localStorage.getItem(nameStor))\r\n\r\n    if (Array.isArray(todos)) {\r\n      todos.map((elem) => {\r\n        console.log(elem)\r\n        const idElem = elem.id\r\n        if (idElem > id) { // move elements\r\n          todos[idElem - 1] = todos[idElem] // change position to the newest\r\n          elem.id--\r\n        }\r\n      })\r\n      todos.pop() // eliminate the last elem, that is the only copy\r\n    }\r\n    localStorage.setItem(nameStor, JSON.stringify(todos))\r\n    setLess(less + 1)\r\n  }\r\n\r\n  return (\r\n    <div className=\"tasks-container\">\r\n      {state === 0 && (Array.isArray(tasks) || tasks.length === 0) && (\r\n        <TaskCard\r\n          task=\"No tasks has not been acomplished\"\r\n          id={-1}\r\n          state={-1}\r\n        />\r\n      )}\r\n      {state === 1 && (Array.isArray(tasks) || tasks.length === 0) && (\r\n        <TaskCard\r\n          task=\"No tasks has been acomplished\"\r\n          id={-1}\r\n          state={-1}\r\n        />\r\n      )}\r\n      {state === -1 && Array.isArray(tasks) && tasks.map((task) => (\r\n        <TaskCard\r\n          transferTODO={transferTODO}\r\n          task={task.msg}\r\n          id={task.id}\r\n          state={state}\r\n          key={task.id}\r\n        />\r\n      ))}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Tasks\r\n","import React from 'react'\r\nimport { AiFillTwitterCircle } from 'react-icons/ai'\r\nimport { GoLogoGithub } from 'react-icons/go'\r\n\r\nimport '../assets/error.css'\r\n\r\nconst Error = () => (\r\n  <div className=\"position\">\r\n    <div className=\"alert\">\r\n      <p>\r\n        Wops! an <span>Error</span> appeared!!! Contact me:\r\n      </p>\r\n      <div className=\"contact\">\r\n        <a href=\"https://twitter.com/blit12_\">\r\n          <AiFillTwitterCircle className=\"contact-t\" />\r\n        </a>\r\n        <a href=\"https://github.com/blitty-codes\">\r\n          <GoLogoGithub className=\"contact-g\" />\r\n        </a>\r\n      </div>\r\n    </div>\r\n  </div>\r\n)\r\n\r\nexport default Error\r\n","/* eslint-disable prefer-const */\nimport React, { useState } from 'react'\nimport Error from './Error'\n\nconst Container = ({ children }) => {\n  const [update, setUpdate] = useState(0)\n  const [state, setState] = useState(-1)\n\n  if (!children) {\n    return <Error />\n  }\n\n  const increment = () => setUpdate(update + 1)\n  const changeState = (a) => setState(a)\n\n  const _children = React.Children.map(children, (child) => {\n    // console.log(child)\n    let props = {}\n\n    if (child.type.name === 'Add') {\n      props.onUpdate = increment\n    }\n    if (child.type.name === 'Tasks') {\n      props.update = update\n      props.state = state\n    }\n    if (child.type.name === 'Options') {\n      props.stateTask = changeState\n    }\n\n    return React.cloneElement(child, props)\n  })\n\n  return _children\n}\n\nexport default Container\n","import React, { useState } from 'react'\r\nimport { AiFillLike, AiFillDislike } from 'react-icons/ai'\r\n\r\nimport '../../assets/options.css'\r\n\r\n// eslint-disable-next-line react/prop-types\r\nconst Options = ({ stateTask }) => {\r\n  const [ShadowOutDone, setShadowOutDone] = useState(true)\r\n  const [ShadowOutNotDone, setShadowOutNotDone] = useState(true)\r\n\r\n  const handleStateDone = () => {\r\n    setShadowOutDone(!ShadowOutDone)\r\n    if (!ShadowOutNotDone) setShadowOutNotDone(!ShadowOutNotDone)\r\n    // if it is pressed then the task is 1\r\n    if (ShadowOutDone) stateTask(1)\r\n    else stateTask(-1)\r\n  }\r\n  const handleStateNotDone = () => {\r\n    setShadowOutNotDone(!ShadowOutNotDone)\r\n    if (!ShadowOutDone) setShadowOutDone(!ShadowOutDone)\r\n    if (ShadowOutNotDone) stateTask(0)\r\n    else stateTask(-1)\r\n  }\r\n\r\n  return (\r\n    <div className=\"container-buttons\">\r\n      <button\r\n        className={`button-done ${ShadowOutDone ? 'shadowOut' : 'shadowIn donePress'}`}\r\n        onClick={handleStateDone}\r\n      >\r\n        <AiFillLike className={`option sizeIcons ${ShadowOutDone ? 'done' : 'donePress'}`} />\r\n        <p className={`option ${ShadowOutDone ? 'txt' : 'donePress'}`}>Done</p>\r\n      </button>\r\n      <button\r\n        className={`button-notDone ${ShadowOutNotDone ? 'shadowOut' : 'shadowIn'}`}\r\n        onClick={handleStateNotDone}\r\n      >\r\n        <AiFillDislike className={`option sizeIcons ${ShadowOutNotDone ? 'notDone' : 'delPress'}`} />\r\n        <p className={`option ${ShadowOutNotDone ? 'txt' : 'delPress'}`}>Not Done</p>\r\n      </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Options\r\n","import React from 'react'\r\nimport { AiFillTwitterCircle } from 'react-icons/ai'\r\nimport { GoLogoGithub } from 'react-icons/go'\r\n\r\nimport '../assets/footer.css'\r\n\r\nconst Footer = () => (\r\n  <footer className=\"footer\">\r\n    <h3 className=\"name\">Done by <strong>@blitty</strong></h3>\r\n    <div>\r\n      <a href=\"https://twitter.com/blit12_\">\r\n        <AiFillTwitterCircle className=\"contact-t\" />\r\n      </a>\r\n      <a href=\"https://github.com/blitty-codes\">\r\n        <GoLogoGithub className=\"contact-g\" />\r\n      </a>\r\n    </div>\r\n\r\n  </footer>\r\n)\r\n\r\nexport default Footer\r\n","import React from 'react'\r\n\r\nimport Container from './Container'\r\nimport Add from './tasks/Add'\r\nimport Tasks from './tasks/Tasks'\r\nimport Options from './tasks/Options'\r\nimport Footer from './Footer'\r\n\r\nimport '../assets/app.css'\r\n\r\n// TODO Best thing? With the div and the class or without it?\r\nconst App = () => (\r\n  <div className=\"center\">\r\n    <Container>\r\n      <Add />\r\n      <Options />\r\n      <hr />\r\n      <Tasks />\r\n      <Footer />\r\n    </Container>\r\n  </div>\r\n)\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister()\n      })\n      .catch(error => {\n        console.error(error.message)\n      })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './assets/index.css'\n\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}